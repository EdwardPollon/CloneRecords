global class CloneRecordWithRelatedPlugin {
    
    /* @createdby: Edward Pollon - 01-January-2024
     * @designed to be invoked by Flows
     *  
     * @In order for this code to work, the relationship field that links the child records to the parent records must be the same across all objects 
     * and must correspond exactly to the parent object name, which should be input through the 'parentSObjectName' input variable.
     * For eample, if the parent object is Opportunity, the lookup/master-detail field on all child custom objects must be have an API name of 'Opportunity__c'.
     * The code will automatically work for all standard objects with relationships to the parent object if the parent object is standard as well.
     * 
     * @Relationship Field Naming Convention Key:
     * Parent Standard Object -- Child Standard Object ----> lookup field on child object: [parent object API name]Id
     * Parent Standard Object -- Child Custom Object ------> lookup field on child object: [parent object API name]
     * Parent Custom Object -- Child Standard Object ------> lookup field on child object: [parent object API name]
     * Parent Custom Object -- Child Custom Object --------> lookup field on child object: [parent object API name]
    */    

    /* inner class to store input variables */
    global class InputsFromFlow{
        @InvocableVariable
        public String selectedSObjects; //This should be a semicolon separated list of object API names (Example --> Custom_Object1__c;Custom_Object2__c;StandardObject)
    
        @InvocableVariable
        public String currentRecordId; //This should be the the record Id of the parent record you're cloning.
    
        @InvocableVariable
        public String parentSObjectName; //This should be the API name of the parent object you're cloning.
    }

    /* inner class to store output variables */
    global class OutputsToFlow{
        @InvocableVariable
        public String clonedRecordId; //This will store the newly cloned parent record Id to optionally form a redirect URL.
    }

    @InvocableMethod
    public static List<OutputsToFlow> constructQuery(List<InputsFromFlow> inputs){

        List<OutputsToFlow> outputs = new List<OutputsToFlow>();
        SObject currentRecord = queryParentRecord(inputs[0].parentSObjectName, inputs[0].currentRecordId);
        SObject clonedParentRecord = cloneparentRecord(currentRecord);
        OutputsToFlow output = new OutputsToFlow();
        output.clonedRecordId = clonedParentRecord.Id;
        outputs.add(output);

        //Only execute the block of code from lines 35-79 if the user opted to clone related child records
        if(!String.isBlank(inputs[0].selectedSObjects)){
            List<String> selectedSObjectsList = inputs[0].selectedSObjects.split(';');
            List<String> relationshipQueryFields = new List<String>();
            String childObjQueryName = '';
            String query = 'SELECT Id';
            System.debug('Selected SObject List: ' + selectedSObjectsList);

            for(String obj : selectedSObjectsList){
                if(obj.endsWith('s__c')){
                    childObjQueryName = obj.replace('__c','es__r');
                    relationshipQueryFields.add(childObjQueryName);
                }
                else if(obj.endsWith('__c')){
                    childObjQueryName = obj.replace('__c','s__r');
                    relationshipQueryFields.add(childObjQueryName);
                }
                else if(obj.endsWith('s')){
                    childObjQueryName = obj + 'es';
                    relationshipQueryFields.add(childObjQueryName);
                }
                else{
                    childObjQueryName = obj + 's';
                    relationshipQueryFields.add(childObjQueryName);
                }
                System.debug('obj: ' + obj);
                SObjectType childSObjectType = Schema.getGlobalDescribe().get(obj);
                List<Schema.SObjectField> childFields = childSObjectType.getDescribe().fields.getMap().values();
                String queryChildObjectFields = '';
                for(Schema.SObjectField field : childFields){
                    if(String.isEmpty(queryChildObjectFields)){
                        queryChildObjectFields += field;
                    }
                    else{
                        queryChildObjectFields += ', ' + field;
                    }              
                }
                query += ', (SELECT ' + queryChildObjectFields + ' FROM ' + childObjQueryName + ')';
            }
        
            query += 'FROM ' + inputs[0].parentSObjectName + ' WHERE Id = \'' + inputs[0].currentRecordId + '\'';
            System.debug('Query: ' + query);

            cloneChildRecords(query, relationshipQueryFields, inputs[0].parentSObjectName, clonedParentRecord);
        }

        return outputs;
    }

    public static SObject queryParentRecord (String parentSObjectName, String currentRecordId){
        SObjectType parentSObjectType = Schema.getGlobalDescribe().get(parentSObjectName);
        List<Schema.SObjectField> parentFields = parentSObjectType.getDescribe().fields.getMap().values();
        String queryParentObjectFields = '';
        for(Schema.SObjectField field : parentFields){
            if(String.isEmpty(queryParentObjectFields)){
                queryParentObjectFields += field;
            }
            else{
                queryParentObjectFields += ', ' + field;
            }              
        }
        String query = 'SELECT ' + queryParentObjectFields + ' FROM ' + parentSObjectName + ' WHERE Id = \'' + currentRecordId + '\'' + ' LIMIT 1';
        SObject currentRecord = Database.query(query);
        System.debug('Query to get current record: ' + query);
        System.debug('Current Record: ' + currentRecord);
        return currentRecord;
    }

    public static SObject cloneParentRecord(SObject currentRecord){
        SObject clonedParentRecord = currentRecord.clone(false, true, false, false);
        insert clonedParentRecord;
        System.debug('Cloned parent record: ' + clonedParentRecord);
        return clonedParentRecord;
    }
    
    public static void cloneChildRecords(String query, List<String> childSObjects, String parentSObjectName, SObject clonedParentRecord){
        System.debug('query: ' + query);
        List<SObject> results = Database.query(query);
        List<SObject> clonedRecordsToInsert = new List<SObject>();
        for(String childObj : childSObjects){
            String relationshipFieldName = '';
            for(SObject result : results){
                for(SObject child : result.getSObjects(childObj)){
                    if(childObj.endsWith('__r')){
                        relationshipFieldName = parentSObjectName + '__c';
                    }
                    else{
                        relationshipFieldName = parentSObjectName + 'Id';
                    }
                    SObject clonedChildRecord = child.clone(false,true,false,false);
                    if(childObj == 'OpportunityLineItems'){
                        clonedChildRecord.put('TotalPrice', null); //When creating OpportunityLineItem records, you can't have both the UnitPrice and TotalPrice fields populated.
                    }
                    clonedChildRecord.put(relationshipFieldName, clonedParentRecord.Id);
                    clonedRecordsToInsert.add(clonedChildRecord);
                }
            }
        }
        if(!clonedRecordsToInsert.isEmpty()){
            System.debug('Cloned Records To Insert: ' + clonedRecordsToInsert);
            insert clonedRecordsToInsert;
        }
    }
}
